/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.precisity.demo.activity.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.precisity.demo.activity.model.Activity;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-05T14:58:44.721Z[GMT]")
@Api(value = "activity", description = "the activity API")
public interface ActivityApi {

  @ApiOperation(value = "Adds an activity", nickname = "addActivity", notes = "", response = Activity.class, tags = { "activity", })
  @ApiResponses(value = { @ApiResponse(code = 201, message = "OK", response = Activity.class),
                          @ApiResponse(code = 400, message = "Bad Request"), @ApiResponse(code = 401, message = "Unauthorized"),
                          @ApiResponse(code = 403, message = "Forbidden") })
  @RequestMapping(value = "/activity", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
  ResponseEntity<Activity> addActivity(@ApiParam(value = "", required = true) @Valid @RequestBody Activity body);

  @ApiOperation(value = "Removes a certain activity", nickname = "deleteActivity", notes = "", tags = { "activity", })
  @ApiResponses(value = { @ApiResponse(code = 204, message = "No Content"), @ApiResponse(code = 401, message = "Unauthorized"),
                          @ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
  @RequestMapping(value = "/activity/{id}", method = RequestMethod.DELETE)
  ResponseEntity<Void> deleteActivity(@ApiParam(value = "", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Get a certain activity", nickname = "getActivity", notes = "", response = Activity.class, tags = { "activity", })
  @ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Activity.class),
                          @ApiResponse(code = 400, message = "Bad Request"), @ApiResponse(code = 401, message = "Unauthorized"),
                          @ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
  @RequestMapping(value = "/activity/{id}", produces = { "application/json" }, method = RequestMethod.GET)
  ResponseEntity<Activity> getActivity(@ApiParam(value = "", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Get all activities", nickname = "getActivityList", notes = "", response = Activity.class, responseContainer = "List", tags = { "activity", })
  @ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Activity.class, responseContainer = "List"),
                          @ApiResponse(code = 400, message = "Bad Request"), @ApiResponse(code = 401, message = "Unauthorized"),
                          @ApiResponse(code = 403, message = "Forbidden") })
  @RequestMapping(value = "/activity", produces = { "application/json" }, method = RequestMethod.GET)
  ResponseEntity<List<Activity>> getActivityList(@ApiParam(value = "author to search for") @Valid @RequestParam(value = "author", required = false) String author,
                                                 @ApiParam(value = "date (YYYY-MM-DD) for specifying a start date to filter the requested data") @Valid @RequestParam(value = "since", required = false) String since,
                                                 @ApiParam(value = "date (YYYY-MM-DD) for specifying an end date to filter the requested data") @Valid @RequestParam(value = "until", required = false) String until,
                                                 @ApiParam(value = "search keyword") @Valid @RequestParam(value = "keyword", required = false) String keyword);

  @ApiOperation(value = "Updates a certain, existing activity", nickname = "updateActivity", notes = "", response = Activity.class, tags = { "activity", })
  @ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Activity.class),
                          @ApiResponse(code = 400, message = "Bad Request"), @ApiResponse(code = 401, message = "Unauthorized"),
                          @ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
  @RequestMapping(value = "/activity/{id}", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PUT)
  ResponseEntity<Activity> updateActivity(@ApiParam(value = "", required = true) @Valid @RequestBody Activity body,
                                          @ApiParam(value = "", required = true) @PathVariable("id") String id);

}
